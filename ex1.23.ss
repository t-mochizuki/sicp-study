;; MIT/GNU Scheme microcode 15.3
;; M-x run-scheme
(define (timed-prime-test2 n)
  (define (next n)
    (if (= n 2)
        3
        (+ n 2)))
  (define (prime? n)
    (define (divides? a b)
      (= (remainder a b) 0))
    (define (find-divisor n test-divisor)
      (cond ((> (square test-divisor) n) n)
            ((divides? n test-divisor) test-divisor)
            (else (find-divisor n (next test-divisor)))))
    (define (smallest-divisor n)
      (find-divisor n 2))
    (= n (smallest-divisor n)))
  (define (start-prime-test n start-time)
    (if (prime? n)
        (report-prime (- (runtime) start-time))))
  (define (report-prime elapsed-time)
    (display " *** ")
    (display elapsed-time))
  (newline)
  (display n)
  (start-prime-test n (runtime)))

(map (lambda (x) (timed-prime-test2 x)) (iota 40 1000000))
;; (map (lambda (x) (timed-prime-test x)) (iota 40 1000000))
