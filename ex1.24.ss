;; MIT/GNU Scheme microcode 15.3
;; M-x run-scheme
(define (timed-prime-test3 n)
  (define (next n)
    (if (= n 2)
        3
        (+ n 2)))
  (define (fast-prime? n times)
    (define (expmod base exp m)
      (cond ((= exp 0) 1)
            ((even? exp)
             (remainder (square (expmod base (/ exp 2) m))
                        m))
            (else
             (remainder (* base (expmod base (- exp 1) m))
                        m))))
    (define (fermat-test n)
      (define (try-it a)
        (= (expmod a n n) a))
      (try-it (+ 1 (random (- n 1)))))
    (cond ((= times 0) true)
          ((fermat-test n) (fast-prime? n (- times 1)))
          (else false)))
  (define (start-prime-test n start-time)
    (if (fast-prime? n 3)
        (report-prime (- (runtime) start-time))))
  (define (report-prime elapsed-time)
    (display " *** ")
    (display elapsed-time))
  (newline)
  (display n)
  (start-prime-test n (runtime)))

(map (lambda (x) (timed-prime-test3 x)) (iota 20 1000))
(map (lambda (x) (list x (fast-prime? x 3))) (iota 20 1000))
(map (lambda (x) (list x (fast-prime? x 3))) (iota 1 1000000))
